#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

#requires: yq and avahi-resolve
# yq comes with xq which is jq for xml
# https://github.com/kislyuk/yq
# pip install yq

command -v jq >/dev/null 2>&1 || { echo >&2 "I require jq but it's not installed.  Aborting."; exit 1; }
command -v xq >/dev/null 2>&1 || { echo >&2 "I require jq but it's not installed.  Aborting."; exit 1; }
command -v avahi-resolve-address >/dev/null 2>&1 || { echo >&2 "I require jq but it's not installed.  Aborting."; exit 1; }

port=22

show_help () {
    echo "Usage: sshScanSubnet {target specification}"
    echo "    target specification: whatever is valid for nmap"
}

firstArg=${1:-}
if [[ $firstArg == "-h" ]] || [[ $firstArg == "--help" ]]; then
    show_help
    exit 0
fi

if [ $# -eq 0 ]; then
    #no arguments
    source sind.sh

    IFS=$'\r\n' GLOBIGNORE='*' command eval  'subnets=($(ip -o -f inet addr show | awk "/scope global/ {print \$2 \" \" \$4}" | column -t))'
    subnetChoice=$(sind "Choose one" "${subnets[@]}")
    subnet=$(echo "${subnets[$subnetChoice]}" | awk '{print $2}')
else
    subnet=$firstArg
fi

echo "scanning $subnet"

sudo nmap -Pn -oX - -p$port $subnet > /tmp/nmapOutput

stage2=$(cat /tmp/nmapOutput | xq -c '.nmaprun.host[] |  [(.address | if type=="array" then [.[0]."@addr", .[1]."@addr", .[1]."@vendor"] else [."@addr"] end), .ports.port.state."@state"]')

#echo -e "$stage2\n\n"
hosts=$(echo "$stage2" | grep open | sed 's/["\[\]]*//g' | sed 's/,open$//' | sed 's/,/, /g')
#set +e #read returns nonzero, is fine
#read -r -d '' hosts << EOM
#10.4.4.1,80:2A:A8:8F:44:33,Ubiquiti Networks
#10.4.4.2,10:DD:B1:B3:EA:57,Apple
#10.4.4.6,B8:27:EB:1D:D7:AA,Raspberry Pi Foundation
#10.4.4.89,80:2A:A8:90:48:E5,Ubiquiti Networks
#10.4.4.91,80:2A:A8:90:48:DA,Ubiquiti Networks
#10.4.4.95,B8:27:EB:B8:FD:95,Raspberry Pi Foundation
#10.4.4.96,B8:27:EB:B8:FD:95,Raspberry Pi Foundation
#10.4.4.116,C4:8E:8F:F3:48:EF,Hon Hai Precision Ind.
#10.4.4.137,D4:6E:0E:03:74:0B,Tp-link Technologies
#10.4.4.172,B8:27:EB:7C:0F:E6,Raspberry Pi Foundation
#10.4.4.190,B8:27:EB:4C:4A:E6,Raspberry Pi Foundation
#10.4.4.219,78:2B:CB:8A:79:08,Dell
#10.4.4.198
#10.4.4.221
#EOM
#set -e

#echo "$hosts"
#echo -e "\n\n"

count=$(echo "$hosts" | wc -l);
echo "resolving hostnames for $count hosts"
#get mdns names
while read line ; do
    #line is "ip      name"
    #not every host is guarenteed a name
    ip=$(echo $line | cut -d' ' -f1)
    hostname=$(echo $line | cut -d' ' -f2)
    hosts="${hosts/$ip/$ip, $hostname}"
done <<< "$(avahi-resolve-address $(echo "$hosts" | cut -d, -f1) 2>/dev/null)"
echo "$hosts" | perl -pe 's/^([^,]*),(?=[^,]*,[^,]*$)/\1, ,/' | column -t -s,
