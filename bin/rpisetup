#!/bin/bash
set -eEu

MOUNT_POINT=/mnt/img
verbose=1
rpi_shell=0
uart=0
target=""
hostname=""
wifi_ssid=""
wifi_pass=""
username="mark"
mounted=false

#So this is in progress between what I had and didn't save because I thought
# it was committed, and things stolen from
# http://peter.lorenzen.us/linux/headless-raspberry-pi-configuration

cleanup() {
    echo "failed $?"
    if [ "$mounted" = true ]; then
        unmount_all
    fi
}

vecho() { [ $verbose -lt 1 ] || echo $* >/dev/stderr; }
vvecho() { [ $verbose -lt 2 ] || echo $* >/dev/stderr; }
SUDO() {
    cmd="sudo $@"
    echo "30: '$cmd'"

    $($cmd);
}

dd_somewhere () {
    dev=$1
    if [ ! -e "$dev" ]; then
        echo "$dev doesn't exist"
        exit 1
    fi
    echo "dding to $dev"
    SUDO dd if="$imgfile" of=$dev bs=1M status=progress
}


mount_loop() {
    mounted=true
    bootStart=$(parted -s "$imgfile" unit B print 2>/dev/null | awk '/^Number/{p=1;next}; p{gsub(/[^[:digit:]]/, "", $2); print $2}' | head -n1)
    bootSize=$(parted -s "$imgfile" unit B print 2>/dev/null | awk '/^Number/{p=1;next}; p{gsub(/[^[:digit:]]/, "", $4); print $4}' | head -n1)
    rootStart=$(parted -s "$imgfile" unit B print 2>/dev/null | awk '/^Number/{p=1;next}; p{gsub(/[^[:digit:]]/, "", $2); print $2}' | head -n2 | tail -n1)
    rootSize=$(parted -s "$imgfile" unit B print 2>/dev/null | awk '/^Number/{p=1;next}; p{gsub(/[^[:digit:]]/, "", $4); print $4}' | head -n2 | tail -n1)
    #parted -s "$imgfile" unit B print
    #echo "bootStart: $bootStart"
    #echo "bootSize: $bootSize"
    #echo "rootStart: $rootStart"
    #echo "rootSize: $rootSize"
    #exit 50

    echo "mounting"
    SUDO mount -o loop,offset="$rootStart",sizelimit="$rootSize" "$imgfile" $MOUNT_POINT
    SUDO mount -o loop,offset="$bootStart",sizelimit="$bootSize" "$imgfile" $MOUNT_POINT/boot
}

is_mounted() {
    mount | grep $(realpath $1) >/dev/null
}

setup_chroot() {
    if [[ ! -f /usr/bin/qemu-arm-static ]]; then
        echo "Install qemu arm"
        return
    fi
    SUDO rsync /usr/bin/qemu-arm-static ${MOUNT_POINT}/usr/bin/
    for f in proc dev sys;do
        is_mounted $MOUNT_POINT/$f || SUDO mount --bind /$f $MOUNT_POINT/$f
    done
}


unmount_all() {
    [ ! -z "$MOUNT_POINT" ] || return 1
    #[ -z "$keep_mount" ] || return 0
    for f in proc dev sys boot;do
        is_mounted $MOUNT_POINT/$f && SUDO umount $MOUNT_POINT/$f
    done
    is_mounted $MOUNT_POINT && SUDO umount $MOUNT_POINT
    mounted=false
}


help () {
    #don't echo commands
    set +x
    # if arguments, print them
    [ $# == 0 ] || echo $*

    echo "usage: $0 <options> zipfile"
    echo " -w, --write=target       write raspian to sdcard"
    echo " -h, --host=name          sets hostname on rpi"
    echo " -u, --user=name          sets username on rpi"
    echo " -s, --shell              start shell on raspian"
    echo "     --uart               enable uart"
    echo "     --wifi-ssid=ssid     set wifi ssid"
    echo "     --wifi-pass=pass     set wifi password"
    echo "                          TODO: wifi doesn't work, wlan0 just doesn't get enabled?"
    echo " -v, --verbose            verbosity, 2 levels"
    echo " -q, --quiet              none verbosity"
    exit
}

# getopt short options go together, long options have commas
TEMP=`getopt -o w:h:u:sv --long help,write:,hostname:,user:,shell,verbose,uart,wifi-ssid:,wifi-pass: -n $0 -- "$@"`
if [ $? != 0 ] ; then
    echo "Something wrong with getopt" >&2
    exit 1
fi
eval set -- "$TEMP"

dir=""
while true ; do
    case "$1" in
        --help) help; exit 0; shift ;;
        -h|--hostname) hostname=$2 ; shift 2 ;;
        -u|--user) username=$2 ; shift 2 ;;
        --wifi-ssid) wifi_ssid=$2 ; shift 2 ;;
        --wifi-pass) wifi_pass=$2 ; shift 2 ;;
        -s|--shell) rpi_shell=1 ; shift ;;
        --uart) uart=1 ; shift ;;
        -v|--verbose) ((verbose++)) ; shift ;;
        -w|--write) target=$2 ; shift 2 ;;
        --) shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done

#if no source file, help
if [ $# -eq 0 ]; then
    help
    exit 1;
fi

zipfile=${1:-}

if [[ ! -z "$hostname" ]]; then echo "hostname: $hostname"; fi
echo "username: $username"
if [ "$rpi_shell" -eq 1 ]; then echo "launching shell"; fi
if [[ ! -z "$target" ]]; then echo "writing to target $target"; fi
echo "verbosity: $verbose"
echo "sourcefile: $zipfile"


# if verbose is 2+, echo all commands
[ $verbose -lt 2 ] || set -x

# STUFF STARTS HERE

#get zipfile, confirm it exists
if [[ ! -f "$zipfile" ]]; then
    echo "zipfile/imgfile doesn't exist";
    exit 1
fi

#TODO: check if latest
# This will get the latest release
# curl http://downloads.raspberrypi.org/rss.xml | xq '[.rss.channel.item[] | select(.title | contains("raspbian_lite"))] | .[-1]'

zipdir=$(dirname $(realpath "${zipfile}"))

if [ ${zipfile: -4} == ".zip" ]; then
    imgfile=$(echo "$zipfile" | sed 's/zip$/img/')
    cd $zipdir
    if [[ ! -f "$imgfile" ]]; then
        unzip $zipfile
        if [[ ! -f "$imgfile" ]]; then
          echo "Issue unzipping $zipfile";
          exit 1
        fi
    fi
else
    imgfile=$zipfile
fi


trap cleanup EXIT ERR

#START OF ACTUAL STUFF
unmount_all
mount_loop
if [ -z "${MOUNT_POINT}" -o ! -f "$MOUNT_POINT/etc/rpi-issue" -o ! -f "$MOUNT_POINT/boot/issue.txt" ]; then
    help raspbian root not as expected
fi
#now we're mounted in memory

SUDO touch $MOUNT_POINT/boot/ssh

setup_chroot
#now we can run commands with chroot and exepct them to work

#assume that if the /home/pi directory doesn't exist, all setup is done.
if [ -d $MOUNT_POINT/home/pi/ ]; then
    if [ ! -d $MOUNT_POINT/home/pi/.dotfiles ]; then
        SUDO git clone https://github.com/mtfurlan/dotfiles.git $MOUNT_POINT/home/pi/.dotfiles
        SUDO chown -R 1000:1000 $MOUNT_POINT/home/pi/.dotfiles
    fi
    SUDO chroot ${MOUNT_POINT} "usermod -l $username pi"
    SUDO chroot ${MOUNT_POINT} "usermod -d /home/$username -m $username"
    SUDO chroot ${MOUNT_POINT} bash -c "echo \"$username:hunter.2\" | chpasswd"
    #set hostname
    SUDO sed -i "s/raspberrypi/$hostname/" $MOUNT_POINT/etc/hosts $MOUNT_POINT/etc/hostname

    if [ "$uart" -eq 1 ]; then
        sudo tee -a "$MOUNT_POINT/boot/config.txt" >/dev/null <<EOF
enable_uart=1
EOF
    fi
    if [[ ! -z "$wifi_ssid" ]]; then
        echo "NOTICE: wifi doesn't work"
        sudo tee "$MOUNT_POINT/boot/wpa_supplicant.conf" >/dev/null <<EOF
country=us
update_config=1
ctrl_interface=/var/run/wpa_supplicant
network={
    ssid="$wifi_ssid"
    psk="$wifi_pass"
}
EOF
    fi

else
    echo "ASSUMING IMAGE ALREADY CONFIGURED: TODO maybe not that"
fi

if [ "$rpi_shell" -eq 1 ]; then
    sudo chroot ${MOUNT_POINT} bash -i
fi


unmount_all

if [[ ! -z "$target" ]]; then
    dd_somewhere $target
fi


## Notes
### if headless, lower GPU memory
# rpisetup -> advanced -> memory split
### swap off
# sudo dphys-swapfile swapoff
# sudo dphys-swapfile uninstall
# sudo update-rc.d dphys-swapfile remove
### swap flash drive
# find uuid at /dev/disk/by-uuid
# in fstab: UUID=a0345e19-192d-49cf-8402-cc9aacc3c473 none swap sw 0 0
# sudo swapon -a
